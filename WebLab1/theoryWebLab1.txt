===1)Протокол HTTP. Структура запросов и ответов, методы запросов, коды ответов сервера, заголовки запросов и ответов.===
HTTP — широко распространённый протокол передачи данных, изначально предназначенный для передачи гипертекстовых документов (то есть документов, которые могут содержать ссылки, позволяющие организовать переход к другим документам).
Аббревиатура HTTP расшифровывается как HyperText Transfer Protocol, «протокол передачи гипертекста». В соответствии со спецификацией OSI, HTTP является протоколом прикладного (верхнего, 7-го) уровня. 
Протокол HTTP предполагает использование клиент-серверной структуры передачи данных. Клиентское приложение формирует запрос и отправляет его на сервер, после чего серверное программное обеспечение обрабатывает данный запрос, формирует ответ и передаёт его обратно клиенту. После этого клиентское приложение может продолжить отправлять другие запросы, которые будут обработаны аналогичным образом.
API многих программных продуктов также подразумевает использование HTTP для передачи данных — сами данные при этом могут иметь любой формат, например, XML или JSON.
Как правило, передача данных по протоколу HTTP осуществляется через TCP/IP-соединения. 
Для того, чтобы сформировать HTTP-запрос, необходимо составить стартовую строку, а также задать по крайней мере один заголовок — это заголовок Host, который является обязательным, и должен присутствовать в каждом запросе. 
Стартовая (начальная) строка запроса для HTTP 1.1 составляется по следующей схеме:
Метод URI HTTP/Версия
Например (такая стартовая строка может указывать на то, что запрашивается главная страница сайта):
GET / HTTP/1.1
Метод определяет операцию, которую нужно осуществить с ресурсом.
Основные методы: 
1)OPTIONS: определение возможностей сервера.
2)GET: запрос содержимого ресурса.
3)HEAD: aналог GET, но в ответе отсутствует тело.
4)POST: передача данных ресурсу.
5)PUT: загрузка содержимого запроса на указанный URI.

1)URI (uniform Resource Indentifier) - — уникальный идентификатор ресурса — символьная строка, позволяющая идентифицировать ресурс.
2)URL (Uniform Resource Locator) — URI, позволяющий определить местонахождение ресурса.
3)URN (Uniform Resource Name) — URI, содержащий единообразное имя ресурса (не указывает на его местонахождение).

пример запроса http: 
Стартовая строка: 
GET /spip.html HTTP/1.1
Заголовки: 
Host: se.ifmo.ru
User-agent: Mozilla/5.0 (x11; U; Linux i686; ru; rv:1.9b5) Gecko/2008050509 Firefox/3.6
Accept: text/html
Connection: close

Структура ответа http: 
Стартовая строка: 
HTTP/Версия КодСостояния Пояснение
HTTP/1.1 200 Ok
Заголовки:
Server: Apache/2.2.11 (Win32) PHP/5.3.0
Last-Modified: Sat, 16 Jan 2010 21:16:42 GMT
Content-Type: text/plain; charset=windows-1251
Content-Language: ru

Коды состояний: 
Состоят из 3 цифр, первая цифра - класс состояний: 
1 - informational 
2 - success 
3 - redirection 
4 - client error
5 - server error
Сам по себе протокол HTTP не предполагает использование шифрования для передачи информации. Тем не менее, для HTTP есть распространённое расширение, которое реализует упаковку передаваемых данных в криптографический протокол SSL или TLS.
Название этого расширения — HTTPS (HyperText Transfer Protocol Secure). Для HTTPS-соединений обычно используется TCP-порт 443. HTTPS широко используется для защиты информации от перехвата, а также, как правило, обеспечивает защиту от атак вида man-in-the-middle — в том случае, если сертификат проверяется на клиенте, и при этом приватный ключ сертификата не был скомпрометирован, пользователь не подтверждал использование неподписанного сертификата, и на компьютере пользователя не были внедрены сертификаты центра сертификации злоумышленника.
На данный момент HTTPS поддерживается всеми популярными веб-браузерами.
===2)Язык разметки HTML. Особенности, основные теги и атрибуты тегов.===
HTML - это язык разметки, используемый для создания веб-страниц. Он определяет структуру и содержание веб-документа. Браузеры интерпретируют HTML-код и отображают веб-страницу на экране.
### Особенности HTML:
* Текстовый: HTML-файлы — это текстовые файлы с расширением .html или .htm.
* Иерархический: HTML-документ организован в виде древовидной структуры с использованием вложенных тегов.
* Теги: Основные элементы HTML-кода — это теги, которые определяют структуру и содержание документа. 
* Атрибуты: Теги могут иметь атрибуты, которые предоставляют дополнительную информацию о теге.

Структурные теги:
* `<html>`: Корневой элемент документа.
* `<head>`: Содержит метаданные о документе (заголовок, описание, ссылки на стили и т.д.).
* `<title>`: Определяет заголовок документа, который отображается на вкладке браузера.
* `<body>`: Содержит видимый текст и элементы страницы.
* `<h1>` - `<h6>`: Заголовки разных уровней.
* `<p>`: Абзац.
* `<br>`: Перевод строки.
* `<hr>`: Горизонтальная линия.

Текстовые теги:
* `<b>`: Жирный текст.
* `<strong>`: Важный текст (часто отображается жирным).
* `<i>`: Курсивный текст.
* `<em>`: Текст с логическим ударением (часто отображается курсивом).
* `<pre>`: Текст с сохранением форматирования (пробелы, переносы строк).
* `<code>`: Текст с кодом.

Ссылки:
* `<a>`: Ссылка на другой ресурс.
* `href`: Атрибут, определяющий адрес ссылки.
* `target`: Атрибут, определяющий способ открытия ссылки (в новой вкладке, в текущей вкладке и т.д.).

изображения: 
* `<img>`: Вставка изображения.
* `src`: Атрибут, определяющий адрес изображения.
* `alt`: Атрибут, определяющий альтернативный текст для изображения (используется для людей с проблемами зрения).

Таблицы:
* `<table>`: Таблица.
* `<tr>`: Строка таблицы.
* `<th>`: Заголовок ячейки.
* `<td>`: Ячейка.

Атрибуты тегов предоставляют дополнительную информацию о теге. 
Например:
* `id`: Уникальный идентификатор элемента.
* `class`: Класс элемента, который используется для стилизации или для группировки элементов.
* `style`: Стиль элемента.
* `title`: Подсказка, которая отображается при наведении курсора на элемент.
* `disabled`: Атрибут, который отключает элемент (например, кнопку).
* `required`: Атрибут, который делает поле ввода обязательным для заполнения.


===3)Структура HTML-страницы. Объектная модель документа (DOM).===
Объектная модель документа, aka DOM, – это интерфейс, с помощью которого программы могут работать с контентом, структурой и стилями веб-страницы. Проще говоря – это набор методов, которые можно вызвать, и свойств, к которым можно обратиться.
* Иерархическая структура: DOM организован в виде дерева, где каждый элемент является узлом. Корневым узлом является `document` (HTML-документ).
* Объекты: Каждый элемент, атрибут, текст на странице — это объект с собственными свойствами и методами.
* Взаимодействие: DOM позволяет нам программно изменять содержимое, структуру и стили страницы.
Зачем нам нужен DOM?
* Динамическое обновление: Изменяем содержимое и внешний вид страниц на лету в зависимости от действий пользователя.
* Создание интерактивности: Делаем страницы "живыми", реагирующими на события (клик, наведение курсора, ввод данных).
* Использование JavaScript: DOM предоставляет JavaScript доступ к структуре и содержимому веб-страницы, что позволяет нам программно управлять ее поведением.
## Взаимосвязь структуры и DOM
HTML-код определяет структуру страницы, а DOM представляет эту структуру в виде дерева объектов, доступных для программирования. 
DOM предоставляет JavaScript доступ к элементам HTML-страницы, позволяя нам манипулировать ими и создавать интерактивные веб-приложения

===4)HTML-формы. Задание метода HTTP-запроса. Правила размещения форм на страницах, виды полей ввода.===
HTML-формы используются для сбора данных от пользователей, таких как имя, электронная почта, пароль или отзывы. Эти данные затем могут быть отправлены на сервер для обработки.

Основные элементы форм:

* `<form>`: Основной тег, который оборачивает все элементы формы.
* `<input>`: Используется для создания полей ввода различного типа.
* `<label>`: Предоставляет текстовую метку для элемента формы, что делает форму более доступной.
* `<textarea>`: Используется для создания многострочного поля ввода текста.
* `<select>`: Используется для создания выпадающего списка.
* `<button>`: Создает кнопку, которая отправляет форму.

Задание метода HTTP-запроса:

Атрибут `method` тега `<form>` определяет, какой HTTP-метод будет использоваться для отправки данных на сервер. Доступные методы:

* `GET`: Данные отправляются в URL-адресе. Не рекомендуется для конфиденциальных данных, так как они видны в адресной строке.
* `POST`: Данные отправляются в теле запроса. Более безопасный метод для конфиденциальных данных.
Виды полей ввода:
* `text`: Текстовое поле для ввода короткого текста.
* `email`: Текстовое поле для ввода адреса электронной почты.
* `password`: Текстовое поле для ввода пароля, которое скрывает вводимый текст.
* `number`: Текстовое поле для ввода чисел.
* `checkbox`: Флажок для выбора одного варианта.
* `radio`: Радиокнопка для выбора одного варианта из нескольких.
* `file`: Поле для выбора файла.
* `textarea`: Многострочное поле ввода текста.
* `select`: Выпадающий список.

===5)Каскадные таблицы стилей (CSS). Структура - правила, селекторы. Виды селекторов, особенности их применения. Приоритеты правил. Преимущества CSS перед непосредственным заданием стилей через атрибуты тегов.===
CSS — технология описания внешнего вида
документа, написанного языком разметки.
● Используется для задания цветов, шрифтов и
других аспектов представления документа.
● Основная цель — разделение содержимого
документа и его представления.
● Позволяет представлять один и тот же документ
в различных методах вывода (например,
обычная версия и версия для печати).

Структура, правила, селекторы: 
Таблица состоит из набора правил
Каждое правило состоит из набора селекторов и блока определений
селектор, селектор {
    свойство: значение;
    свойство: значение;
    свойство: значение;
}
пример: 
div, td {
    background-color: red;
}

Приоритеты стилей: 
Если к одному элементу «подходит» сразу несколько
стилей, применён будет наиболее приоритетный.
● Приоритеты рассчитываются таким образом (от
большего к меньшему):
1. свойство задано при помощи !important;
2. стиль прописан напрямую в теге;
3. наличие идентификаторов (#id) в селекторе;
4. количество классов (.class) и псевдоклассов
(:pseudoclass) в селекторе;
5. количество имён тегов в селекторе.
● Имеет значение относительный порядок расположения
свойств — свойство, указанное позже, имеет приоритет.
Приоритеты

примеры:
селектор по id: 
#id {
    color: red;
}
селектор по классу: 
.class {
    color: black;
}
селектор по элементу: 
h2, div {
    color: yellow
}
псевдоклассы состояния: 
1)a:hover { стиль по наведению курсора
    color: red
}
2)a:active { стиль по нажатию
    color: red     
}
3)input:focus { устанавливает фокус на поле

}

преимущества задания css стилей перед заданием стилей в виде атрибутов тега: 
1)читаемость
2)повторное использование стилей
3)повышение производительности(браузер может кешировать стили)
4)эффективность и скоращение кода = читаемость опять же сука бля 

===6)LESS, Sass, SCSS. Ключевые особенности, сравнительные характеристики. Совместимость с браузерами, трансляция в "обычный" CSS.=== 
Языки стилей, позволяющие повысить уровень абстракции CSS-
кода и упростить структуру таблиц стилей.
По сравнению с «обычным» CSS, имеются следующие особенности:
● Можно использовать переменные (константы и примеси).
● Можно использовать вложенные правила.
● Более мощные возможности по импорту, наследованию стилей.
● Поддержка математических операторов.
Браузеры могут не поддерживать LESS & Sass / SCSS-таблицы
стилей — нужен специальный транслятор, который преобразует
эти правила в «обычный» CSS.
1)less - css-like syntax
.box-1 {
    color: ;
    .set-bg-color();
}
2)sass - ruby-like syntax 
.my-element {
    color = !primary-color 
    width = 100%
    overflow = hidden
}
3)scss - диалект sass с css - like syntax 
.my-element {
    color: $primary-color;
    width: 100%;
    overflow: hidden;
}

Для компиляции в css файлы требуются утилиты командной строки или встроенные в ide(типа мавеном можно воспользоваться)


===7)Клиентские сценарии. Особенности, сферы применения. Язык JavaScript.===
js - объектно ориентированный скриптовый яп 
используется для придания интерактивности веб страницам 
основные архитектурные черты: 
1)динамическая типизация 
2)слабая типизация 
3)автоматическое управление памятью 
4)прототипное программирование 
5)функции как объекты первого класса 
6)все идентификаторы регистрозависимые 
7)в названиях переменных могут использоваться буквы, цифры(но не может начинатся с цифры), подчеркивания, символ доллара

Структура языка: 
1)Ядро (ECMAScript)
2)Browser Object Model
3)DOM
ECMAScript:

* Стандарт: ECMAScript - это стандарт языка программирования, который описывает синтаксис, семантику и API. Это как набор правил, которые определяют, как должен работать язык.
* Независимый: ECMAScript сам по себе не является конкретным языком, а скорее его спецификацией. 

JavaScript:

* Реализация: JavaScript - это конкретная реализация стандарта ECMAScript.  
* Популярность: JavaScript — самый популярный язык для разработки веб-приложений, благодаря широкой поддержке браузерами. 
* Дополнения: JavaScript-реализация может включать дополнительные функции, которые не описаны в стандарте ECMAScript.

Особенности ECMAScript:
1)блок не ограничивает область видимости
2)функция тоже объект
3)function() {}; var s = function() {}; var s = new Function()

===8)Версии ECMAScript, новые возможности ES6 и ES7. === 
ES - разные версии стандарта ECMAScript.
1)появилось ключевое слово let, которое позволяет объявить переменную, область видимости которой блок
2)ключевое слово const, позволяет объявить константу 
3)литералы шаблона: 
ES5: 
var first 
var last 
console.log('ur name ' + first ' and second ' + last); 
ES6: 
console.log('ur name ${first} ${last}')
4)деструктуризация - особый синтаксис присваивания, при котором можно присвоить массив или объект сразу нескольким переменным, разбив его на части 
5)новый синтаксис описания и инициализации объектов. 
6)наследования super и extends
7)промисы вместо коллбэков(промисы представляют результат асинхронных операций)
8)стрелочные функции

===9)Синхронная и асинхронная обработка HTTP-запросов. AJAX.===
тут рассказать надо в чем разница + xmlhttprequest и fetch
AJAX (Asynchronous JavaScript and XML) - это техника, которая позволяет веб-страницам обмениваться данными с сервером без перезагрузки всей страницы. Это позволяет создавать более интерактивные и динамичные веб-приложения.
Ключевые особенности AJAX:
* Асинхронность: AJAX использует асинхронные запросы для взаимодействия с сервером. Это означает, что запрос отправляется в фоновом режиме, и пользовательский интерфейс продолжает работать.
* JavaScript: AJAX использует JavaScript для отправки запросов, получения данных и обновления контента страницы.
* XML: Хотя в названии упоминается XML, AJAX может работать с различными форматами данных, включая JSON, HTML, текст и т.д.
Как работает AJAX:
1. Событие: Пользовательское действие, например, клик по кнопке, запускает AJAX-запрос.
2. Запрос: JavaScript создает объект `XMLHttpRequest` (или использует API `fetch`) для отправки запроса на сервер.
3. Ответ: Сервер обрабатывает запрос и возвращает ответ.
4. Обработка ответа: JavaScript получает ответ от сервера, анализирует его и обновляет контент страницы.
Преимущества AJAX:
* Динамичность: AJAX позволяет обновлять контент страницы без перезагрузки, что создает более плавный и интерактивный пользовательский опыт.
* Эффективность: AJAX-запросы отправляют только необходимые данные, что снижает нагрузку на сервер и сокращает время загрузки страницы.
* Интерактивность: AJAX делает возможным создание веб-приложений, которые реагируют на действия пользователя в реальном времени.
Примеры использования AJAX:
* Автозаполнение: Предложение вариантов поиска при вводе текста в поле ввода.
* Обновление контента: Загрузка новых данных на странице без перезагрузки.
* Взаимодействие с картами: Интерактивные карты, которые обновляются в зависимости от действий пользователя.
* Социальные сети: Получение обновлений в ленте новостей без перезагрузки страницы.
AJAX — это мощная техника, которая позволяет создавать более динамичные и интерактивные веб-приложения. Он широко используется в современных веб-сайтах и приложениях.
Важно:
* AJAX является лишь одной из многих технологий, которые используются для создания динамических веб-приложений.
* Хотя AJAX и называется "Asynchronous JavaScript and XML", он не ограничивается использованием XML.
* AJAX — это не язык программирования, а техника, использующая JavaScript для взаимодействия с сервером.

===11)Реализация AJAX с помощью SuperAgent.===
request
    .post(url)/.get(url) #метод
    .send({ name: 'Manny', species: 'cat' }) # что отправляем
    .set('Authorization', 'Bearer your-token') # устанавливаем заголовок 
    .attach(file, path/to/file) # прикрепляем файл
    .then(reponse => {}) # дальнейшая обработка
    .catch(error) # отлавливаем ошибки

===12)Серверные сценарии. CGI - определение, назначение, ключевые особенности.=== 
1)программы вызываемые на сервере для формирования динамического контента 
2)веб сервер делегирует им на обработку запрос и транслирует сформированный ответ клиенту 

===CGI===
1)CGI (Common Gateway Interface) - простейший механизм вызова пользователем программ на стороне сервера 
2)Данные отправляются посредствам http запроса который формируется браузером 
3)то как будет вызвана программа определяет url запрос 
4)каждый запрос обрабатывается отдельным процессом CGI программы 
5)взаимодействие через stdin stdout

Достоинства: 
● Программы могут быть написаны на множестве языков
программирования.
● «Падение» CGI-сценария не приводит к «падению» всего
сервера.
● Исключены конфликты при параллельной обработке
нескольких запросов.
● Хорошая поддержка веб-серверами.
Недостатки: 
● Высокие накладные расходы на создание нового процесса.
● Плохая масштабируемость.
● Слабое разделение уровня представления и бизнес-
логики.
● Могут быть платформо-зависимыми.

===13)FastCGI - особенности технологии, преимущества и недостатки относительно CGI.===
FCGI: 
1)Развитие технологии CGI.
2)Все запросы могут обрабатываться одним
процессом CGI-программы (фактическая
реализация определяется программистом).
3)Веб-сервер взаимодействует с процессом через
UNIX Domain Sockets или TCP/IP (а не через stdin и
stdout).
4)Для общения по TCP/IP используется бинарный
протокол, обеспечивающий передачу любых
текстовый данных (например HTTP запросов и
ответов).

